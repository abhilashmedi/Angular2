import { Observable } from 'rxjs/Observable';
export declare type Comparator = (x: any, y: any) => boolean;
export declare type Transformer<RootState, V> = (store$: Observable<RootState>) => Observable<V>;
export declare type PropertySelector = string | number | symbol;
export declare type PathSelector = (string | number)[];
export declare type FunctionSelector<RootState, S> = ((s: RootState) => S);
export declare type Selector<RootState, S> = PropertySelector | PathSelector | FunctionSelector<RootState, S>;
/** @hidden */
export declare const sniffSelectorType: <RootState, S>(selector?: string | number | symbol | (string | number)[] | ((s: RootState) => S) | undefined) => "path" | "function" | "nil" | "property";
/** @hidden */
export declare const resolver: <RootState, S>(selector?: string | number | symbol | (string | number)[] | ((s: RootState) => S) | undefined) => {
    property: (state: any) => any;
    path: (state: RootState) => any;
    function: (s: RootState) => S;
    nil: (state: RootState) => RootState;
};
/** @hidden */
export declare const resolveToFunctionSelector: <RootState, S>(selector?: string | number | symbol | (string | number)[] | ((s: RootState) => S) | undefined) => ((state: RootState) => any) | ((s: RootState) => S) | ((state: RootState) => RootState) | ((state: any) => any);
